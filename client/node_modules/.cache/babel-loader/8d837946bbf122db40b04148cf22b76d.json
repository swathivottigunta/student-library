{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CFS\\\\express-react\\\\student-library\\\\client\\\\src\\\\App\\\\components\\\\StudentChangeStatus.js\";\nimport React from 'react';\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport Student from '../utils/Student';\nimport '../Change-Status.css';\nconst columnNames = ['active', 'delinquent', 'dropped'];\nlet childItems;\nconst cardColor = 'beige'; // Generate Items\n\nconst generateSceneItems = () => {\n  let scene = {};\n  scene.type = \"container\";\n  scene.props = {\n    orientation: \"horizontal\"\n  };\n  scene.children = generateColumnItems();\n  return scene;\n};\n\nconst generateColumnItems = (count, creator) => {\n  const result = [];\n\n  for (let i = 0; i < columnNames.length; i++) {\n    let column = {};\n    column.type = \"container\";\n    column.id = \"column\".concat(i);\n    column.name = columnNames[i];\n    column.props = {\n      orientation: \"vertical\",\n      className: \"card-container\"\n    };\n    column.children = generateChildItems(i);\n    result.push(column);\n  }\n\n  return result;\n};\n\nconst generateChildItems = column => {\n  let items = childItems.students[column];\n  let result = [];\n\n  if (items) {\n    for (let i = 0; i < items.length; i++) {\n      let item = {};\n      item = items[i];\n      item.type = \"draggable\";\n      item.props = {\n        className: 'card',\n        style: {\n          backgroundColor: cardColor\n        }\n      };\n      result.push(item);\n    }\n  }\n\n  return result;\n};\n\nconst applyDrag = (arr, dragResult) => {\n  const removedIndex = dragResult.removedIndex,\n        addedIndex = dragResult.addedIndex,\n        payload = dragResult.payload;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n\n  if (removedIndex !== null) {\n    itemToAdd = result.splice(removedIndex, 1)[0];\n  }\n\n  if (addedIndex !== null) {\n    result.splice(addedIndex, 0, itemToAdd);\n  }\n\n  return result;\n};\n\nclass StudentChangeStatus extends React.Component {\n  constructor() {\n    super();\n    this.onCardDrop = this.onCardDrop.bind(this);\n    this.getCardPayload = this.getCardPayload.bind(this);\n    this.state = {\n      scene: null,\n      message: ''\n    };\n  }\n\n  componentDidMount() {\n    this._asyncRequest = Student.getAllStudentsByStatus().then(students => {\n      if (students) {\n        childItems = students;\n        this.setState({\n          scene: generateSceneItems()\n        });\n      } else {\n        this._asyncRequest = null;\n        this.setState({\n          message: 'Something went wrong. Try again!!'\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  render() {\n    let containerItems;\n\n    if (this.state.scene !== null) {\n      containerItems = this.state.scene.children.map(column => {\n        return React.createElement(\"div\", {\n          key: column.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: column.props.className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-column-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"column-drag-handle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"Status: \"), column.name), React.createElement(Container, Object.assign({}, column.props, {\n          groupName: \"col\",\n          onDrop: e => this.onCardDrop(column.id, e),\n          getChildPayload: index => this.getCardPayload(column.id, index),\n          dragClass: \"card-ghost\",\n          dropClass: \"card-ghost-drop\",\n          dropPlaceholder: {\n            animationDuration: 150,\n            showOnTop: true,\n            className: 'drop-preview'\n          },\n          dropPlaceholderAnimationDuration: 200,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), column.children.map(card => {\n          return React.createElement(Draggable, {\n            key: card.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, React.createElement(\"div\", Object.assign({}, card.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, \"Id: \", card.id), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, card.firstName, \" \", card.lastName), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, card.phoneNumber))));\n        }))));\n      });\n    } else {\n      containerItems = '';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"card-scene\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, this.state.message), React.createElement(Container, {\n      orientation: \"horizontal\",\n      dragHandleSelector: \".column-drag-handle\",\n      dropPlaceholder: {\n        animationDuration: 150,\n        showOnTop: true,\n        className: 'cards-drop-preview'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, containerItems));\n  }\n\n  getCardPayload(columnId, index) {\n    console.log(columnId, index);\n    this.setState({\n      message: ''\n    });\n    return this.state.scene.children.filter(p => p.id === columnId)[0].children[index];\n  }\n\n  onCardDrop(columnId, dropResult) {\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      const scene = Object.assign({}, this.state.scene);\n      const column = scene.children.filter(p => p.id === columnId)[0];\n      const columnIndex = scene.children.indexOf(column);\n      const newColumn = Object.assign({}, column);\n      newColumn.children = applyDrag(newColumn.children, dropResult);\n      scene.children.splice(columnIndex, 1, newColumn);\n      this.setState({\n        scene\n      });\n    }\n\n    if (dropResult.addedIndex !== null) {\n      let studentId = dropResult.payload.id;\n      let studentStatus = columnId;\n      studentStatus = columnNames[studentStatus.replace('column', '')];\n\n      if (dropResult.payload.status !== studentStatus) {\n        let student = {\n          id: studentId,\n          status: studentStatus\n        };\n        this.setState({\n          message: 'Updating...'\n        });\n        Student.updateStudentByStatus(student).then(student => {\n          if (student) {\n            this.setState({\n              message: 'Updated Status Successfully'\n            });\n          } else {\n            this.setState({\n              message: 'Something went wrong. Try again!!',\n              scene: generateSceneItems()\n            });\n          }\n        });\n      }\n    }\n  }\n\n}\n\nexport default StudentChangeStatus;","map":{"version":3,"sources":["C:\\Users\\CFS\\express-react\\student-library\\client\\src\\App\\components\\StudentChangeStatus.js"],"names":["React","Container","Draggable","Student","columnNames","childItems","cardColor","generateSceneItems","scene","type","props","orientation","children","generateColumnItems","count","creator","result","i","length","column","id","name","className","generateChildItems","push","items","students","item","style","backgroundColor","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","splice","StudentChangeStatus","Component","constructor","onCardDrop","bind","getCardPayload","state","message","componentDidMount","_asyncRequest","getAllStudentsByStatus","then","setState","componentWillUnmount","cancel","render","containerItems","map","e","index","animationDuration","showOnTop","card","firstName","lastName","phoneNumber","columnId","console","log","filter","p","dropResult","Object","assign","columnIndex","indexOf","newColumn","studentId","studentStatus","replace","status","student","updateStudentByStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Container, Draggable } from \"react-smooth-dnd\";\r\nimport Student from '../utils/Student'\r\nimport '../Change-Status.css';\r\n\r\n\r\n\r\nconst columnNames = ['active', 'delinquent', 'dropped'];\r\nlet childItems;\r\nconst cardColor = 'beige'\r\n\r\n// Generate Items\r\n\r\nconst generateSceneItems = () => {\r\n    let scene = {}\r\n    scene.type = \"container\";\r\n    scene.props = { orientation: \"horizontal\" }\r\n    scene.children = generateColumnItems()\r\n    return scene;\r\n}\r\nconst generateColumnItems = (count, creator) => {\r\n    const result = [];\r\n    for (let i = 0; i < columnNames.length; i++) {\r\n        let column = {};\r\n        column.type = \"container\";\r\n        column.id = `column${i}`\r\n        column.name = columnNames[i]\r\n        column.props = {\r\n            orientation: \"vertical\",\r\n            className: \"card-container\"\r\n        }\r\n        column.children = generateChildItems(i);\r\n        result.push(column)\r\n    }\r\n    return result;\r\n};\r\nconst generateChildItems = (column) => {\r\n\r\n    let items = childItems.students[column];\r\n    let result = []\r\n    if (items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = {};\r\n            item = items[i]\r\n            item.type = \"draggable\";\r\n            item.props = { className: 'card', style: { backgroundColor: cardColor } }\r\n            result.push(item)\r\n        }\r\n    }\r\n    return result\r\n};\r\nconst applyDrag = (arr, dragResult) => {\r\n    const { removedIndex, addedIndex, payload } = dragResult;\r\n    if (removedIndex === null && addedIndex === null) return arr;\r\n\r\n    const result = [...arr];\r\n    let itemToAdd = payload;\r\n\r\n    if (removedIndex !== null) {\r\n        itemToAdd = result.splice(removedIndex, 1)[0];\r\n    }\r\n\r\n    if (addedIndex !== null) {\r\n        result.splice(addedIndex, 0, itemToAdd);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nclass StudentChangeStatus extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.onCardDrop = this.onCardDrop.bind(this);\r\n        this.getCardPayload = this.getCardPayload.bind(this);\r\n        this.state = {\r\n            scene: null,\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._asyncRequest = Student.getAllStudentsByStatus().then(students => {\r\n            if (students) {\r\n                childItems = students\r\n                this.setState({ scene: generateSceneItems() })\r\n            }\r\n            else {\r\n                this._asyncRequest = null;\r\n                this.setState({\r\n                    message: 'Something went wrong. Try again!!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        if (this._asyncRequest) {\r\n            this._asyncRequest.cancel();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let containerItems;\r\n\r\n        if (this.state.scene !== null) {\r\n            containerItems = this.state.scene.children.map(column => {\r\n                return (\r\n\r\n                    <div key={column.id}>\r\n\r\n                        <div className={column.props.className}>\r\n                            <div className=\"card-column-header\">\r\n                                <span className=\"column-drag-handle\">Status: </span>\r\n                                {column.name}\r\n                            </div>\r\n                            <Container\r\n                                {...column.props}\r\n                                groupName=\"col\"\r\n                                onDrop={e => this.onCardDrop(column.id, e)}\r\n                                getChildPayload={index =>\r\n                                    this.getCardPayload(column.id, index)\r\n                                }\r\n                                dragClass=\"card-ghost\"\r\n                                dropClass=\"card-ghost-drop\"\r\n                                dropPlaceholder={{\r\n                                    animationDuration: 150,\r\n                                    showOnTop: true,\r\n                                    className: 'drop-preview'\r\n                                }}\r\n                                dropPlaceholderAnimationDuration={200}\r\n                            >\r\n                                {column.children.map(card => {\r\n                                    return (\r\n                                        <Draggable key={card.id}>\r\n                                            <div {...card.props}>\r\n                                                <div>\r\n                                                    <p>Id: {card.id}</p><p>{card.firstName} {card.lastName}</p><p>{card.phoneNumber}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })\r\n        }\r\n        else {\r\n            containerItems = ''\r\n        }\r\n        return (\r\n\r\n            <div className=\"card-scene\">\r\n                <div className=\"result\">{this.state.message}</div>\r\n                <Container\r\n                    orientation=\"horizontal\"\r\n                    dragHandleSelector=\".column-drag-handle\"\r\n                    dropPlaceholder={{\r\n                        animationDuration: 150,\r\n                        showOnTop: true,\r\n                        className: 'cards-drop-preview'\r\n                    }}\r\n                >\r\n                    {\r\n                        containerItems\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getCardPayload(columnId, index) {\r\n        console.log(columnId, index)\r\n        this.setState({\r\n            message: ''\r\n        });\r\n        return this.state.scene.children.filter(p => p.id === columnId)[0].children[\r\n            index\r\n        ];\r\n    }\r\n\r\n    onCardDrop(columnId, dropResult) {\r\n\r\n        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\r\n            const scene = Object.assign({}, this.state.scene);\r\n            const column = scene.children.filter(p => p.id === columnId)[0];\r\n            const columnIndex = scene.children.indexOf(column);\r\n\r\n            const newColumn = Object.assign({}, column);\r\n            newColumn.children = applyDrag(newColumn.children, dropResult);\r\n            scene.children.splice(columnIndex, 1, newColumn);\r\n\r\n            this.setState({\r\n                scene\r\n            });\r\n        }\r\n        if (dropResult.addedIndex !== null) {\r\n            let studentId = dropResult.payload.id\r\n\r\n            let studentStatus = columnId\r\n            studentStatus = columnNames[studentStatus.replace('column', '')]\r\n            if (dropResult.payload.status !== studentStatus) {\r\n                let student = { id: studentId, status: studentStatus }\r\n                this.setState({\r\n                    message: 'Updating...'\r\n                });\r\n                Student.updateStudentByStatus(student).then(student => {\r\n                    if (student) {\r\n                        this.setState({\r\n                            message: 'Updated Status Successfully'\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            message: 'Something went wrong. Try again!!',\r\n                            scene: generateSceneItems()\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\nexport default StudentChangeStatus;"]},"metadata":{},"sourceType":"module"}