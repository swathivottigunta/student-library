{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CFS\\\\express-react\\\\student-library\\\\client\\\\src\\\\App\\\\components\\\\StudentFilter.js\";\nimport React from 'react';\nimport Pagination from 'react-paginating';\nimport StudentTable from './StudentTable';\nimport Student from '../utils/Student';\nconst pageCount = 3;\n\nclass StudentFilter extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePageChange = (page, e) => {\n      this.setState({\n        currentPage: page\n      });\n      this.loadData(page, this.state.status, this.state.limit);\n    };\n\n    this.handleLimitChange = e => {\n      this.setState({\n        limit: e.target.value,\n        currentPage: 1\n      });\n      this.loadData(1, this.state.status, e.target.value);\n    };\n\n    this.filterBy = ['all', 'active', 'delinquent', 'dropped'];\n    this.onChange = this.onChange.bind(this);\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.handleLimitChange = this.handleLimitChange.bind(this);\n    this.state = {\n      students: '',\n      message: '',\n      limit: 10,\n      currentPage: 1,\n      status: 'all',\n      totalCount: 0\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.students === '') this.loadData(1, this.state.status, this.state.limit);\n  }\n\n  loadData(page, status, limit) {\n    this.setState({\n      message: \"Loading\",\n      students: ''\n    });\n    let newOffset = limit * (page - 1);\n    Student.getStudentsByStatus(status, limit, newOffset).then(jsonResponse => {\n      if (jsonResponse.totalCount > 0) {\n        this.setState({\n          students: jsonResponse.students,\n          totalCount: jsonResponse.totalCount,\n          message: ''\n        });\n      } else {\n        this.setState({\n          message: \"No Records Found\",\n          students: '',\n          totalCount: 0\n        });\n      }\n    }).catch(err => {\n      alert('error' + err);\n    });\n  }\n\n  onChange(event) {\n    this.setState({\n      status: event.target.value,\n      currentPage: 1\n    });\n    this.loadData(1, event.target.value, this.state.limit);\n  }\n\n  render() {\n    let pagination;\n\n    if (this.state.totalCount > 0) {\n      pagination = React.createElement(\"div\", {\n        id: \"pagination-records\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"row-limit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Records per rows \"), React.createElement(\"select\", {\n        id: \"row-limit\",\n        onChange: this.handleLimitChange,\n        value: this.state.limit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"10\"), React.createElement(\"option\", {\n        value: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"20\"))), React.createElement(Pagination, {\n        total: this.state.totalCount,\n        limit: this.state.limit,\n        pageCount: pageCount,\n        currentPage: this.state.currentPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, ({\n        pages,\n        currentPage,\n        hasNextPage,\n        hasPreviousPage,\n        previousPage,\n        nextPage,\n        totalPages,\n        getPageItemProps\n      }) => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"button\", Object.assign({}, getPageItemProps({\n        pageValue: 1,\n        onPageChange: this.handlePageChange\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), \"first\"), hasPreviousPage && React.createElement(\"button\", Object.assign({}, getPageItemProps({\n        pageValue: previousPage,\n        onPageChange: this.handlePageChange\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), \"<\"), pages.map(page => {\n        let activePage = null;\n\n        if (currentPage === page) {\n          activePage = {\n            backgroundColor: \"#fdce09\"\n          };\n        }\n\n        return React.createElement(\"button\", Object.assign({}, getPageItemProps({\n          pageValue: page,\n          key: page,\n          style: activePage,\n          onPageChange: this.handlePageChange\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }), page);\n      }), hasNextPage && React.createElement(\"button\", Object.assign({}, getPageItemProps({\n        pageValue: nextPage,\n        onPageChange: this.handlePageChange\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), \">\"), React.createElement(\"button\", Object.assign({}, getPageItemProps({\n        pageValue: totalPages,\n        onPageChange: this.handlePageChange\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), \"last\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content-buttons-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Filter By:\"), React.createElement(\"div\", {\n      className: \"dropdown\",\n      id: \"status-filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"dropdown-content\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.filterBy.map(filter => {\n      return React.createElement(\"option\", {\n        key: filter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, filter);\n    })))), React.createElement(\"div\", {\n      className: \"result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(StudentTable, {\n      students: this.state.students,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), pagination));\n  }\n\n}\n\nexport default StudentFilter;","map":{"version":3,"sources":["C:\\Users\\CFS\\express-react\\student-library\\client\\src\\App\\components\\StudentFilter.js"],"names":["React","Pagination","StudentTable","Student","pageCount","StudentFilter","Component","constructor","handlePageChange","page","e","setState","currentPage","loadData","state","status","limit","handleLimitChange","target","value","filterBy","onChange","bind","students","message","totalCount","componentDidMount","newOffset","getStudentsByStatus","then","jsonResponse","catch","err","alert","event","render","pagination","pages","hasNextPage","hasPreviousPage","previousPage","nextPage","totalPages","getPageItemProps","pageValue","onPageChange","map","activePage","backgroundColor","key","style","filter"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Pagination from 'react-paginating'\r\n\r\nimport StudentTable from './StudentTable'\r\n\r\nimport Student from '../utils/Student'\r\n\r\n\r\nconst pageCount = 3;\r\n\r\nclass StudentFilter extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.filterBy = ['all', 'active', 'delinquent', 'dropped']\r\n        this.onChange = this.onChange.bind(this);\r\n        this.handlePageChange = this.handlePageChange.bind(this);\r\n        this.handleLimitChange = this.handleLimitChange.bind(this)\r\n\r\n        this.state = {\r\n            students: '',\r\n            message: '',\r\n            limit: 10,\r\n            currentPage: 1,\r\n            status: 'all',\r\n            totalCount: 0\r\n        }\r\n    }\r\n    componentDidMount() {        \r\n        if (this.state.students === '') this.loadData(1, this.state.status, this.state.limit);\r\n    }\r\n    loadData(page, status, limit) {\r\n        this.setState({\r\n            message: \"Loading\",\r\n            students: ''\r\n        })\r\n        let newOffset = (limit * (page - 1));\r\n        Student.getStudentsByStatus(status, limit, newOffset).then(jsonResponse => {\r\n            if (jsonResponse.totalCount > 0) {\r\n                this.setState({\r\n                    students: jsonResponse.students,\r\n                    totalCount: jsonResponse.totalCount,\r\n                    message: ''\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    message: \"No Records Found\",\r\n                    students: '',\r\n                    totalCount: 0\r\n                })\r\n            }\r\n\r\n        }).catch(err => {\r\n            alert('error' + err)\r\n        })\r\n    }\r\n    onChange(event) {\r\n        this.setState({ status: event.target.value, currentPage: 1 })\r\n        this.loadData(1, event.target.value, this.state.limit)\r\n    }\r\n    handlePageChange = (page, e) => {\r\n        this.setState({\r\n            currentPage: page\r\n        });        \r\n        this.loadData(page, this.state.status, this.state.limit)\r\n    };\r\n    handleLimitChange = ( e) => {\r\n        this.setState({\r\n            limit: e.target.value,\r\n            currentPage: 1\r\n        });        \r\n        this.loadData(1, this.state.status, e.target.value)\r\n    };\r\n    render() {\r\n        let pagination\r\n        if (this.state.totalCount > 0) {\r\n            pagination = (\r\n                <div id=\"pagination-records\">\r\n                    <div><label htmlFor=\"row-limit\" >Records per rows </label><select id=\"row-limit\" onChange={this.handleLimitChange} value={this.state.limit}><option value='10'>10</option><option value='20'>20</option></select></div>\r\n                    <Pagination\r\n                        total={this.state.totalCount}\r\n                        limit={this.state.limit}\r\n                        pageCount={pageCount}\r\n                        currentPage={this.state.currentPage}\r\n                    >\r\n                        {({\r\n                            pages,\r\n                            currentPage,\r\n                            hasNextPage,\r\n                            hasPreviousPage,\r\n                            previousPage,\r\n                            nextPage,\r\n                            totalPages,\r\n                            getPageItemProps\r\n                        }) => (\r\n                                <div>\r\n                                    <button {...getPageItemProps({pageValue: 1, onPageChange: this.handlePageChange})}>first</button>\r\n                                    {hasPreviousPage && (<button {...getPageItemProps({pageValue: previousPage,onPageChange: this.handlePageChange})}>\r\n                                            {\"<\"}</button>)}\r\n\r\n                                    {pages.map(page => {\r\n                                        let activePage = null;\r\n                                        if (currentPage === page) {\r\n                                            activePage = { backgroundColor: \"#fdce09\" };\r\n                                        }\r\n                                        return (\r\n                                            <button {...getPageItemProps({ pageValue: page, key: page, style: activePage, onPageChange: this.handlePageChange })}>\r\n                                                {page}\r\n                                            </button>);\r\n                                    })}\r\n\r\n                                    {hasNextPage && ( <button{...getPageItemProps({pageValue: nextPage, onPageChange: this.handlePageChange })} >\r\n                                            {\">\"}\r\n                                        </button>)}\r\n\r\n                                    <button {...getPageItemProps({pageValue: totalPages, onPageChange: this.handlePageChange })}>\r\n                                        last \r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                    </Pagination>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"content-buttons-right\">\r\n                    <div>Filter By:</div>\r\n                    <div className=\"dropdown\" id=\"status-filter\">\r\n                        <select className=\"dropdown-content\" onChange={this.onChange}>\r\n                            {\r\n                                this.filterBy.map(filter => {\r\n                                    return (\r\n                                        <option key={filter} >{filter}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </div >\r\n\r\n                <div className=\"result\">{this.state.message}</div>\r\n                <div>\r\n                    <StudentTable students={this.state.students} />\r\n                    {pagination}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default StudentFilter;"]},"metadata":{},"sourceType":"module"}