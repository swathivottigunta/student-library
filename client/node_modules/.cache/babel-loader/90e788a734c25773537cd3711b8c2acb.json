{"ast":null,"code":"const Student = {};\nconst baseUrl = 'http://localhost:4000/api';\n\nStudent.updateStudentByStatus = student => {\n  const url = \"\".concat(baseUrl, \"/student/\").concat(student.id);\n  console.log(url);\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      student: student\n    })\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse.student;\n    });\n  });\n};\n\nStudent.getAllStudentsByStatus = () => {\n  const url = \"\".concat(baseUrl, \"/allstudents\");\n  console.log(url);\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse;\n    });\n  });\n};\n\nStudent.getStudentsByStatus = (status, limit, offset) => {\n  const url = \"\".concat(baseUrl, \"/students/\").concat(status, \"?_limit=\").concat(limit, \"&_offset=\").concat(offset);\n  console.log(url);\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse;\n    });\n  });\n};\n\nStudent.getStudentById = studentId => {\n  const url = \"\".concat(baseUrl, \"/student/\").concat(studentId);\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse.student;\n    });\n  });\n};\n\nStudent.createStudent = student => {\n  const url = \"\".concat(baseUrl, \"/students\");\n  const fetchOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      student: student\n    })\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse.student;\n    });\n  });\n};\n\nStudent.updateStudent = student => {\n  const url = \"\".concat(baseUrl, \"/students/\").concat(student.id);\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      student: student\n    })\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n\n    return response.json().then(jsonResponse => {\n      return jsonResponse.student;\n    });\n  });\n};\n\nexport default Student;","map":{"version":3,"sources":["C:\\Users\\CFS\\express-react\\student-library\\client\\src\\App\\utils\\Student.js"],"names":["Student","baseUrl","updateStudentByStatus","student","url","id","console","log","fetchOptions","method","headers","body","JSON","stringify","fetch","then","response","ok","Promise","resolve","json","jsonResponse","getAllStudentsByStatus","getStudentsByStatus","status","limit","offset","getStudentById","studentId","createStudent","updateStudent"],"mappings":"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","sourcesContent":["const Student = {};\r\nconst baseUrl = 'http://localhost:4000/api';\r\nStudent.updateStudentByStatus = (student) => {\r\n  const url = `${baseUrl}/student/${student.id}`;\r\n  console.log(url)\r\n  const fetchOptions = {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({student: student})\r\n  };\r\n  return fetch(url, fetchOptions).then(response => {\r\n    if (!response.ok) {\r\n      return new Promise(resolve => resolve(null));\r\n    }\r\n    return response.json().then(jsonResponse => {\r\n      return jsonResponse.student;\r\n    });\r\n  });\r\n};\r\nStudent.getAllStudentsByStatus = () => {\r\n  const url = `${baseUrl}/allstudents`;\r\n  console.log(url)\r\n  return fetch(url).then(response => {\r\n    if (!response.ok) {\r\n      return new Promise(resolve => resolve(null));\r\n    }\r\n    return response.json().then(jsonResponse => {\r\n      return jsonResponse;\r\n    });\r\n  });\r\n};\r\nStudent.getStudentsByStatus = (status, limit, offset) => {\r\n  const url = `${baseUrl}/students/${status}?_limit=${limit}&_offset=${offset}`;\r\n  console.log(url)\r\n  return fetch(url).then(response => {\r\n    if (!response.ok) {\r\n      return new Promise(resolve => resolve(null));\r\n    }\r\n    return response.json().then(jsonResponse => {\r\n      return jsonResponse;\r\n    });\r\n  });\r\n};\r\nStudent.getStudentById = studentId => {\r\n  const url = `${baseUrl}/student/${studentId}`;\r\n  return fetch(url).then(response => {\r\n    if (!response.ok) {\r\n      return new Promise(resolve => resolve(null));\r\n    }\r\n    return response.json().then(jsonResponse => {\r\n      return jsonResponse.student;\r\n    });\r\n  });\r\n};\r\nStudent.createStudent = student => {\r\n    const url = `${baseUrl}/students`;\r\n    const fetchOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({student: student})\r\n    };\r\n    return fetch(url, fetchOptions).then(response => {\r\n      if (!response.ok) {\r\n        return new Promise(resolve => resolve(null));\r\n      }\r\n      return response.json().then(jsonResponse => {\r\n        return jsonResponse.student;\r\n      });\r\n    });\r\n  };\r\n \r\nStudent.updateStudent = student => {\r\n  const url = `${baseUrl}/students/${student.id}`;\r\n  const fetchOptions = {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({student: student})\r\n  };\r\n  return fetch(url, fetchOptions).then(response => {\r\n    if (!response.ok) {\r\n      return new Promise(resolve => resolve(null));\r\n    }\r\n    return response.json().then(jsonResponse => {\r\n      return jsonResponse.student;\r\n    });\r\n  });\r\n};\r\n  export default Student;"]},"metadata":{},"sourceType":"module"}